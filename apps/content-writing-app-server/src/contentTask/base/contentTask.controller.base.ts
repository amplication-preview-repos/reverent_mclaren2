/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ContentTaskService } from "../contentTask.service";
import { ContentTaskCreateInput } from "./ContentTaskCreateInput";
import { ContentTask } from "./ContentTask";
import { ContentTaskFindManyArgs } from "./ContentTaskFindManyArgs";
import { ContentTaskWhereUniqueInput } from "./ContentTaskWhereUniqueInput";
import { ContentTaskUpdateInput } from "./ContentTaskUpdateInput";

export class ContentTaskControllerBase {
  constructor(protected readonly service: ContentTaskService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ContentTask })
  async createContentTask(
    @common.Body() data: ContentTaskCreateInput
  ): Promise<ContentTask> {
    return await this.service.createContentTask({
      data: data,
      select: {
        createdAt: true,
        id: true,
        status: true,
        taskId: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ContentTask] })
  @ApiNestedQuery(ContentTaskFindManyArgs)
  async contentTasks(@common.Req() request: Request): Promise<ContentTask[]> {
    const args = plainToClass(ContentTaskFindManyArgs, request.query);
    return this.service.contentTasks({
      ...args,
      select: {
        createdAt: true,
        id: true,
        status: true,
        taskId: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ContentTask })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async contentTask(
    @common.Param() params: ContentTaskWhereUniqueInput
  ): Promise<ContentTask | null> {
    const result = await this.service.contentTask({
      where: params,
      select: {
        createdAt: true,
        id: true,
        status: true,
        taskId: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ContentTask })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateContentTask(
    @common.Param() params: ContentTaskWhereUniqueInput,
    @common.Body() data: ContentTaskUpdateInput
  ): Promise<ContentTask | null> {
    try {
      return await this.service.updateContentTask({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          status: true,
          taskId: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ContentTask })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteContentTask(
    @common.Param() params: ContentTaskWhereUniqueInput
  ): Promise<ContentTask | null> {
    try {
      return await this.service.deleteContentTask({
        where: params,
        select: {
          createdAt: true,
          id: true,
          status: true,
          taskId: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
