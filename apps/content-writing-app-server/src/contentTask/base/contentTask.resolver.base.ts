/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ContentTask } from "./ContentTask";
import { ContentTaskCountArgs } from "./ContentTaskCountArgs";
import { ContentTaskFindManyArgs } from "./ContentTaskFindManyArgs";
import { ContentTaskFindUniqueArgs } from "./ContentTaskFindUniqueArgs";
import { CreateContentTaskArgs } from "./CreateContentTaskArgs";
import { UpdateContentTaskArgs } from "./UpdateContentTaskArgs";
import { DeleteContentTaskArgs } from "./DeleteContentTaskArgs";
import { ContentTaskService } from "../contentTask.service";
@graphql.Resolver(() => ContentTask)
export class ContentTaskResolverBase {
  constructor(protected readonly service: ContentTaskService) {}

  async _contentTasksMeta(
    @graphql.Args() args: ContentTaskCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ContentTask])
  async contentTasks(
    @graphql.Args() args: ContentTaskFindManyArgs
  ): Promise<ContentTask[]> {
    return this.service.contentTasks(args);
  }

  @graphql.Query(() => ContentTask, { nullable: true })
  async contentTask(
    @graphql.Args() args: ContentTaskFindUniqueArgs
  ): Promise<ContentTask | null> {
    const result = await this.service.contentTask(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ContentTask)
  async createContentTask(
    @graphql.Args() args: CreateContentTaskArgs
  ): Promise<ContentTask> {
    return await this.service.createContentTask({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ContentTask)
  async updateContentTask(
    @graphql.Args() args: UpdateContentTaskArgs
  ): Promise<ContentTask | null> {
    try {
      return await this.service.updateContentTask({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ContentTask)
  async deleteContentTask(
    @graphql.Args() args: DeleteContentTaskArgs
  ): Promise<ContentTask | null> {
    try {
      return await this.service.deleteContentTask(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
