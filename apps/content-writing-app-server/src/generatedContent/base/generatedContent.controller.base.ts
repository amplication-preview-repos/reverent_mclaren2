/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GeneratedContentService } from "../generatedContent.service";
import { GeneratedContentCreateInput } from "./GeneratedContentCreateInput";
import { GeneratedContent } from "./GeneratedContent";
import { GeneratedContentFindManyArgs } from "./GeneratedContentFindManyArgs";
import { GeneratedContentWhereUniqueInput } from "./GeneratedContentWhereUniqueInput";
import { GeneratedContentUpdateInput } from "./GeneratedContentUpdateInput";

export class GeneratedContentControllerBase {
  constructor(protected readonly service: GeneratedContentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: GeneratedContent })
  async createGeneratedContent(
    @common.Body() data: GeneratedContentCreateInput
  ): Promise<GeneratedContent> {
    return await this.service.createGeneratedContent({
      data: data,
      select: {
        contentText: true,
        createdAt: true,
        id: true,
        seoScore: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [GeneratedContent] })
  @ApiNestedQuery(GeneratedContentFindManyArgs)
  async generatedContents(
    @common.Req() request: Request
  ): Promise<GeneratedContent[]> {
    const args = plainToClass(GeneratedContentFindManyArgs, request.query);
    return this.service.generatedContents({
      ...args,
      select: {
        contentText: true,
        createdAt: true,
        id: true,
        seoScore: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: GeneratedContent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async generatedContent(
    @common.Param() params: GeneratedContentWhereUniqueInput
  ): Promise<GeneratedContent | null> {
    const result = await this.service.generatedContent({
      where: params,
      select: {
        contentText: true,
        createdAt: true,
        id: true,
        seoScore: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: GeneratedContent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateGeneratedContent(
    @common.Param() params: GeneratedContentWhereUniqueInput,
    @common.Body() data: GeneratedContentUpdateInput
  ): Promise<GeneratedContent | null> {
    try {
      return await this.service.updateGeneratedContent({
        where: params,
        data: data,
        select: {
          contentText: true,
          createdAt: true,
          id: true,
          seoScore: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: GeneratedContent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteGeneratedContent(
    @common.Param() params: GeneratedContentWhereUniqueInput
  ): Promise<GeneratedContent | null> {
    try {
      return await this.service.deleteGeneratedContent({
        where: params,
        select: {
          contentText: true,
          createdAt: true,
          id: true,
          seoScore: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
