/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  GeneratedContent as PrismaGeneratedContent,
} from "@prisma/client";

export class GeneratedContentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.GeneratedContentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.generatedContent.count(args);
  }

  async generatedContents(
    args: Prisma.GeneratedContentFindManyArgs
  ): Promise<PrismaGeneratedContent[]> {
    return this.prisma.generatedContent.findMany(args);
  }
  async generatedContent(
    args: Prisma.GeneratedContentFindUniqueArgs
  ): Promise<PrismaGeneratedContent | null> {
    return this.prisma.generatedContent.findUnique(args);
  }
  async createGeneratedContent(
    args: Prisma.GeneratedContentCreateArgs
  ): Promise<PrismaGeneratedContent> {
    return this.prisma.generatedContent.create(args);
  }
  async updateGeneratedContent(
    args: Prisma.GeneratedContentUpdateArgs
  ): Promise<PrismaGeneratedContent> {
    return this.prisma.generatedContent.update(args);
  }
  async deleteGeneratedContent(
    args: Prisma.GeneratedContentDeleteArgs
  ): Promise<PrismaGeneratedContent> {
    return this.prisma.generatedContent.delete(args);
  }
}
