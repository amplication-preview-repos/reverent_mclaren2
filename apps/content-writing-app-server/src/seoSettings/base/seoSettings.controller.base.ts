/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SeoSettingsService } from "../seoSettings.service";
import { SeoSettingsCreateInput } from "./SeoSettingsCreateInput";
import { SeoSettings } from "./SeoSettings";
import { SeoSettingsFindManyArgs } from "./SeoSettingsFindManyArgs";
import { SeoSettingsWhereUniqueInput } from "./SeoSettingsWhereUniqueInput";
import { SeoSettingsUpdateInput } from "./SeoSettingsUpdateInput";

export class SeoSettingsControllerBase {
  constructor(protected readonly service: SeoSettingsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SeoSettings })
  async createSeoSettings(
    @common.Body() data: SeoSettingsCreateInput
  ): Promise<SeoSettings> {
    return await this.service.createSeoSettings({
      data: data,
      select: {
        createdAt: true,
        id: true,
        keyword: true,
        metaDescription: true,
        tags: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SeoSettings] })
  @ApiNestedQuery(SeoSettingsFindManyArgs)
  async seoSettingsItems(
    @common.Req() request: Request
  ): Promise<SeoSettings[]> {
    const args = plainToClass(SeoSettingsFindManyArgs, request.query);
    return this.service.seoSettingsItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        keyword: true,
        metaDescription: true,
        tags: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SeoSettings })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async seoSettings(
    @common.Param() params: SeoSettingsWhereUniqueInput
  ): Promise<SeoSettings | null> {
    const result = await this.service.seoSettings({
      where: params,
      select: {
        createdAt: true,
        id: true,
        keyword: true,
        metaDescription: true,
        tags: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SeoSettings })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSeoSettings(
    @common.Param() params: SeoSettingsWhereUniqueInput,
    @common.Body() data: SeoSettingsUpdateInput
  ): Promise<SeoSettings | null> {
    try {
      return await this.service.updateSeoSettings({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          keyword: true,
          metaDescription: true,
          tags: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SeoSettings })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSeoSettings(
    @common.Param() params: SeoSettingsWhereUniqueInput
  ): Promise<SeoSettings | null> {
    try {
      return await this.service.deleteSeoSettings({
        where: params,
        select: {
          createdAt: true,
          id: true,
          keyword: true,
          metaDescription: true,
          tags: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
