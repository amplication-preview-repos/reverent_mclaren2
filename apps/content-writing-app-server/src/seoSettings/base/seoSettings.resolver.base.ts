/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { SeoSettings } from "./SeoSettings";
import { SeoSettingsCountArgs } from "./SeoSettingsCountArgs";
import { SeoSettingsFindManyArgs } from "./SeoSettingsFindManyArgs";
import { SeoSettingsFindUniqueArgs } from "./SeoSettingsFindUniqueArgs";
import { CreateSeoSettingsArgs } from "./CreateSeoSettingsArgs";
import { UpdateSeoSettingsArgs } from "./UpdateSeoSettingsArgs";
import { DeleteSeoSettingsArgs } from "./DeleteSeoSettingsArgs";
import { SeoSettingsService } from "../seoSettings.service";
@graphql.Resolver(() => SeoSettings)
export class SeoSettingsResolverBase {
  constructor(protected readonly service: SeoSettingsService) {}

  async _seoSettingsItemsMeta(
    @graphql.Args() args: SeoSettingsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [SeoSettings])
  async seoSettingsItems(
    @graphql.Args() args: SeoSettingsFindManyArgs
  ): Promise<SeoSettings[]> {
    return this.service.seoSettingsItems(args);
  }

  @graphql.Query(() => SeoSettings, { nullable: true })
  async seoSettings(
    @graphql.Args() args: SeoSettingsFindUniqueArgs
  ): Promise<SeoSettings | null> {
    const result = await this.service.seoSettings(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SeoSettings)
  async createSeoSettings(
    @graphql.Args() args: CreateSeoSettingsArgs
  ): Promise<SeoSettings> {
    return await this.service.createSeoSettings({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => SeoSettings)
  async updateSeoSettings(
    @graphql.Args() args: UpdateSeoSettingsArgs
  ): Promise<SeoSettings | null> {
    try {
      return await this.service.updateSeoSettings({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SeoSettings)
  async deleteSeoSettings(
    @graphql.Args() args: DeleteSeoSettingsArgs
  ): Promise<SeoSettings | null> {
    try {
      return await this.service.deleteSeoSettings(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
