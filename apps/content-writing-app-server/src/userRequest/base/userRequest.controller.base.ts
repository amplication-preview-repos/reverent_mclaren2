/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UserRequestService } from "../userRequest.service";
import { UserRequestCreateInput } from "./UserRequestCreateInput";
import { UserRequest } from "./UserRequest";
import { UserRequestFindManyArgs } from "./UserRequestFindManyArgs";
import { UserRequestWhereUniqueInput } from "./UserRequestWhereUniqueInput";
import { UserRequestUpdateInput } from "./UserRequestUpdateInput";

export class UserRequestControllerBase {
  constructor(protected readonly service: UserRequestService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UserRequest })
  async createUserRequest(
    @common.Body() data: UserRequestCreateInput
  ): Promise<UserRequest> {
    return await this.service.createUserRequest({
      data: data,
      select: {
        contentLength: true,
        contentTone: true,
        createdAt: true,
        id: true,
        requestType: true,
        updatedAt: true,
        youtubeLink: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [UserRequest] })
  @ApiNestedQuery(UserRequestFindManyArgs)
  async userRequests(@common.Req() request: Request): Promise<UserRequest[]> {
    const args = plainToClass(UserRequestFindManyArgs, request.query);
    return this.service.userRequests({
      ...args,
      select: {
        contentLength: true,
        contentTone: true,
        createdAt: true,
        id: true,
        requestType: true,
        updatedAt: true,
        youtubeLink: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UserRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async userRequest(
    @common.Param() params: UserRequestWhereUniqueInput
  ): Promise<UserRequest | null> {
    const result = await this.service.userRequest({
      where: params,
      select: {
        contentLength: true,
        contentTone: true,
        createdAt: true,
        id: true,
        requestType: true,
        updatedAt: true,
        youtubeLink: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UserRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUserRequest(
    @common.Param() params: UserRequestWhereUniqueInput,
    @common.Body() data: UserRequestUpdateInput
  ): Promise<UserRequest | null> {
    try {
      return await this.service.updateUserRequest({
        where: params,
        data: data,
        select: {
          contentLength: true,
          contentTone: true,
          createdAt: true,
          id: true,
          requestType: true,
          updatedAt: true,
          youtubeLink: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UserRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUserRequest(
    @common.Param() params: UserRequestWhereUniqueInput
  ): Promise<UserRequest | null> {
    try {
      return await this.service.deleteUserRequest({
        where: params,
        select: {
          contentLength: true,
          contentTone: true,
          createdAt: true,
          id: true,
          requestType: true,
          updatedAt: true,
          youtubeLink: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
