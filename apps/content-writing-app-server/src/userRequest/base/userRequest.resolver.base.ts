/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { UserRequest } from "./UserRequest";
import { UserRequestCountArgs } from "./UserRequestCountArgs";
import { UserRequestFindManyArgs } from "./UserRequestFindManyArgs";
import { UserRequestFindUniqueArgs } from "./UserRequestFindUniqueArgs";
import { CreateUserRequestArgs } from "./CreateUserRequestArgs";
import { UpdateUserRequestArgs } from "./UpdateUserRequestArgs";
import { DeleteUserRequestArgs } from "./DeleteUserRequestArgs";
import { UserRequestService } from "../userRequest.service";
@graphql.Resolver(() => UserRequest)
export class UserRequestResolverBase {
  constructor(protected readonly service: UserRequestService) {}

  async _userRequestsMeta(
    @graphql.Args() args: UserRequestCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [UserRequest])
  async userRequests(
    @graphql.Args() args: UserRequestFindManyArgs
  ): Promise<UserRequest[]> {
    return this.service.userRequests(args);
  }

  @graphql.Query(() => UserRequest, { nullable: true })
  async userRequest(
    @graphql.Args() args: UserRequestFindUniqueArgs
  ): Promise<UserRequest | null> {
    const result = await this.service.userRequest(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => UserRequest)
  async createUserRequest(
    @graphql.Args() args: CreateUserRequestArgs
  ): Promise<UserRequest> {
    return await this.service.createUserRequest({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => UserRequest)
  async updateUserRequest(
    @graphql.Args() args: UpdateUserRequestArgs
  ): Promise<UserRequest | null> {
    try {
      return await this.service.updateUserRequest({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserRequest)
  async deleteUserRequest(
    @graphql.Args() args: DeleteUserRequestArgs
  ): Promise<UserRequest | null> {
    try {
      return await this.service.deleteUserRequest(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
