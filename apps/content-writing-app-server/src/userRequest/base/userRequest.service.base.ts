/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, UserRequest as PrismaUserRequest } from "@prisma/client";

export class UserRequestServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.UserRequestCountArgs, "select">
  ): Promise<number> {
    return this.prisma.userRequest.count(args);
  }

  async userRequests(
    args: Prisma.UserRequestFindManyArgs
  ): Promise<PrismaUserRequest[]> {
    return this.prisma.userRequest.findMany(args);
  }
  async userRequest(
    args: Prisma.UserRequestFindUniqueArgs
  ): Promise<PrismaUserRequest | null> {
    return this.prisma.userRequest.findUnique(args);
  }
  async createUserRequest(
    args: Prisma.UserRequestCreateArgs
  ): Promise<PrismaUserRequest> {
    return this.prisma.userRequest.create(args);
  }
  async updateUserRequest(
    args: Prisma.UserRequestUpdateArgs
  ): Promise<PrismaUserRequest> {
    return this.prisma.userRequest.update(args);
  }
  async deleteUserRequest(
    args: Prisma.UserRequestDeleteArgs
  ): Promise<PrismaUserRequest> {
    return this.prisma.userRequest.delete(args);
  }
}
